{
  __meta__: {
    author: 'stefan.stojanovic',
    source: 'https://github.com/enkidevs/curriculum/blob/master/web/html/forms-iii/range.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>Which form input type defines a slider control?</p>\n<p>???</p>\n',
    answers: [
      {
        text: 'range',
      },
      {
        text: 'max-min',
      },
      {
        text: 'controls',
      },
      {
        text: 'slider',
      },
      {
        text: 'drag',
      },
    ],
    comment: '<p>The HTML form input type <code>range</code> is used to specify any numeric value between two numbers. That value cannot be less than or greater than the two chosen values. It is usually represented by a slider. This kind of value control is not precise, so it should only be used if the exact value is not important and it requires some JavaScript to display the dynamic value. </p>\n<p>Example:</p>\n<pre><code class="language-html">&#x3C;input\n  type="range"\n  min="1"\n  max="100"\n  value="50"\n  id="myRange">\n&#x3C;p>\n  Value:\n  &#x3C;span\n    id="display">\n  &#x3C;/span>\n&#x3C;/p>\n\n&#x3C;script>\n var slider =\n  document.getElementById("myRange");\n var output =\n  document.getElementById("display");\n output.innerHTML = slider.value;\n\n slider.oninput = function() {\n  output.innerHTML = this.value;\n }\n&#x3C;/script>\n</code></pre>\n<p><svg xmlns="http://www.w3.org/2000/svg" width="320" height="93"><defs><linearGradient id="a" x1="50%" x2="50%" y1="0%" y2="98.4375%"><stop offset="0%" stop-color="#747474"/><stop offset="100%" stop-color="#969696"/></linearGradient><linearGradient id="b" x1="50%" x2="50%" y1="0%" y2="44.23997%"><stop offset="0%" stop-color="#F6F6F6"/><stop offset="100%" stop-color="#ECECEC"/></linearGradient></defs><g fill="none" fill-rule="evenodd"><rect width="320" height="93" fill="#FFF" rx="9"/><path fill="#D8D8D8" stroke="url(#a)" d="M20 23.5c-.82843 0-1.5.67157-1.5 1.5v1c0 .82843.67157 1.5 1.5 1.5h125c.82843 0 1.5-.67157 1.5-1.5v-1c0-.82843-.67157-1.5-1.5-1.5H20z"/><path fill="url(#b)" stroke="#969696" d="M83 32c3.866 0 7-3.134 7-7 0-.76635-.12315-1.50394-.35074-2.19406C88.72873 20.01465 86.09964 18 83 18c-3.866 0-7 3.134-7 7s3.134 7 7 7z"/><text fill="#000" font-family="ArialMT, Arial" font-size="14"><tspan x="19" y="66">Value: 50</tspan></text></g></svg></p>\n<!--[View CodePen](https://codepen.io/enkidevs/pen/bKOxPL)--> \n<p>Breaking down the example:</p>\n<pre><code class="language-html">&#x3C;input\n  type="range"\n  min="1"\n  max="100"\n  value="50"\n  id="myRange">\n</code></pre>\n<p>With this block of HTML code, we have set the input to type <code>range</code>. The initial value is set to 50. The <code>id</code> is set as <code>myRange</code> and will be used later with the JavaScript <code>document.getElementbyId()</code> method.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>If the values of min and max are not specified, the default value of min is 0 and the default value of max is 100.</li>\n<li>You can also set negative numbers, such as: <code>min=-5</code> and <code>max=5</code></li>\n</ul>\n<pre><code class="language-html">&#x3C;script>\n var slider =\n  document.getElementById("myRange");\n var output =\n  document.getElementById("demo");\n output.innerHTML = slider.value;\n\n slider.oninput = function() {\n  output.innerHTML = this.value;\n }\n&#x3C;/script>\n</code></pre>\n<p>This block of code is JavaScript and used to provide the necessary functionality to the slider. The variable <code>slider</code> is used to connect with the HTML element with the id of \'myRange\'. The variable <code>output</code> is used to connect with the HTML element with the id of \'display\' which will display the changing value of the slider. The <code>oninput</code> function sets the changing value of the slider with the display value so as soon as there is a change in the input, or in this case as soon as the slider moves, the value on the page is visually changed.</p>\n<p>Additionally, you can edit your sliders by adding hash marks. This is done with the <code>list</code> attribute and the <code>&#x3C;datalist></code> element.</p>\n<p><strong>Note:</strong> Chrome only supports these tick marks currently.</p>\n<p>Example:</p>\n<pre><code class="language-html">&#x3C;input\n  type="range"\n  list="tickmarks">\n\n&#x3C;datalist id="tickmarks">\n  &#x3C;option value="0">\n  &#x3C;option value="25">\n  &#x3C;option value="50">\n  &#x3C;option value="75">\n  &#x3C;option value="100">\n&#x3C;/datalist>\n</code></pre>\n<p><svg xmlns="http://www.w3.org/2000/svg" width="320" height="93"><defs><linearGradient id="a" x1="50%" x2="50%" y1="0%" y2="98.4375%"><stop offset="0%" stop-color="#747474"/><stop offset="100%" stop-color="#969696"/></linearGradient><linearGradient id="b" x1="50%" x2="50%" y1="0%" y2="44.23997%"><stop offset="0%" stop-color="#F6F6F6"/><stop offset="100%" stop-color="#ECECEC"/></linearGradient></defs><g fill="none" fill-rule="evenodd"><rect width="320" height="93" fill="#FFF" rx="9"/><path stroke="#979797" stroke-linecap="square" d="M83.5 17.5v2"/><path fill="#D8D8D8" stroke="url(#a)" d="M20 23.5c-.82843 0-1.5.67157-1.5 1.5v1c0 .82843.67157 1.5 1.5 1.5h125c.82843 0 1.5-.67157 1.5-1.5v-1c0-.82843-.67157-1.5-1.5-1.5H20z"/><path fill="url(#b)" stroke="#969696" d="M83.5 32c3.866 0 7-3.134 7-7 0-.76635-.12315-1.50394-.35074-2.19406C89.22873 20.01465 86.59964 18 83.5 18c-3.866 0-7 3.134-7 7s3.134 7 7 7z"/><text fill="#000" font-family="ArialMT, Arial" font-size="14"><tspan x="19" y="66">Value: 50</tspan></text><path stroke="#979797" stroke-linecap="square" d="M26.5 17.5v2m28.75-2v2m56.5-2v2m28.75-2v2"/></g></svg></p>\n<!--[View CodePen](https://codepen.io/enkidevs/pen/pKqxEY)--> \n<p>In the example above, we defined a slider with 5 hash marks, at 0, 25, 50, 75 and 100. This slider has values you can easily set with the hash marks. Each point is represented by the <code>&#x3C;option></code> element and its value set to the desired range\'s value where the hash mark should be.</p>\n<p>Example:</p>\n<pre><code class="language-html">&#x3C;input\n  type="range"\n  list="tickmarks">\n\n&#x3C;datalist id="tickmarks">\n  &#x3C;option value="0">\n  &#x3C;option value="25">\n  &#x3C;option value="50">\n  &#x3C;option value="75">\n  &#x3C;option value="100">\n&#x3C;/datalist>\n</code></pre>\n',
  },
}