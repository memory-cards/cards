{
  __meta__: {
    author: 'lizTheDeveloper',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/function-improvements/arrow-functions-part-2.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'feature',
    'introduction',
    'es6',
    'workout',
    'functions',
  ],
  card: {
    question: '<p>Create a counter that can successfully count up and down:</p>\n<pre><code>function Counter () {\n  this.counter = 0;\n  this.countUp = setInterval(???, 1000)\n  this.countDown = setInterval(???, 1000)\n}\n\nlet count = new Counter();\n</code></pre>\n',
    answers: [
      {
        text: '<code>() => {this.counter++;}</code>',
      },
      {
        text: '<code>() => {this.counter--;}</code>',
      },
      {
        text: '<code>function() {this.counter++;}</code>',
      },
      {
        text: '<code>function() {this.counter--;}</code>',
      },
    ],
    comment: '<p>Arrow Functions(<code>() => {}</code>) differ from anonymous keyword functions (<code>function(){}</code>) by not changing the value of <code>this</code>.</p>\n<pre><code>window.counter = 0\n\nfunction Counter () {\n  this.counter = 0;\n  this.countUp = setInterval(function() {\n    this.counter++;\n  }, 1000)\n  this.countDown = setInterval(() => {\n    this.counter--;\n  }, 1000)\n}\n\nlet count = new Counter();\n</code></pre>\n<p>In the <code>countUp</code> counter, <code>window.counter</code> is modified, because keyword functions use the same .\nIn the <code>countDown</code> counter, <code>Counter.counter</code> because the <code>this</code> value is preserved.</p>\n',
  },
}