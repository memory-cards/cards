{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/classes-modules/extends-super-and-static.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>Consider the following ES6 class:</p>\n<pre><code class="language-javascript">class Animal {\n  constructor(name) {\n    this.name = name\n  }\n}\n</code></pre>\n<p>Fill in the next snippet such that the <code>Dog</code> class is a child of the <code>Animal</code> class. In addition, this class should call its parent\'s constructor, given the same arguments and have a static method <code>bark</code> which will print "Woof woof".</p>\n<pre><code class="language-javascript">??? ??? ??? ???{\n  ???(name) {\n    ???(name)\n  }\n\n  ??? ??? {\n    console.log("Woof Woof")\n  }\n}\n</code></pre>\n',
    answers: [
      {
        text: 'class',
      },
      {
        text: 'Dog',
      },
      {
        text: 'extends',
      },
      {
        text: 'Animal',
      },
      {
        text: 'constructor',
      },
      {
        text: 'super',
      },
      {
        text: 'static',
      },
      {
        text: 'bark()',
      },
      {
        text: 'barks',
      },
      {
        text: 'bark(name)',
      },
      {
        text: 'bark:',
      },
      {
        text: 'extend',
      },
      {
        text: 'Bark',
      },
      {
        text: 'super()',
      },
      {
        text: 'parent',
      },
      {
        text: 'childOf',
      },
    ],
    comment: '<p>The <strong>extends</strong> keyword allows you to inherit from another class and the <strong>super</strong> keyword allows us to access functionality on the parent.</p>\n<p>The below example creates a new class called <code>Engineer</code> that inherits from <code>Person</code> calling Person\'s constructor with the super keyword.</p>\n<p>Our Engineer class also has a method called greet that will call the parent classes sayHello method:</p>\n<pre><code class="language-javascript">class Engineer extends Person {\n constructor(name, age){\n  super(name)\n  this.age = age;\n }\n\n greet: function(){\n  super.sayHello();\n }\n}\n\nvar e = new Engineer("alex", 35);\n</code></pre>\n<h3>Static</h3>\n<p>The static keyword creates a method on the class type itself and is often used for utility methods as allows them to be called without instantiating the class:</p>\n<pre><code class="language-javascript">class UtilityMethods {\n  static log() {\n    console.log("hello enki");\n  }\n};\n\nUtilityMethods.log();\n</code></pre>\n<p>Note if you instantiate a class with static methods then you cannot call static methods on the instantiated class:</p>\n<pre><code class="language-javascript">var a = new UtilityMethods();\na.log(); //error\n</code></pre>\n',
  },
}