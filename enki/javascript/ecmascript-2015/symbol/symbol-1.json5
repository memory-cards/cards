{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/symbol/symbol.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: "<p>How do you create a <code>Symbol</code> in ES6?</p>\n<pre><code class=\"language-javascript\">// a\nconst sym = new Symbol('enki')\n\n// b\nconst sym = Symbol.create('enki')\n\n// c\nconst sym = Symbol('enki')\n\n// d\nconst sym = Symbol.new('enki')\n</code></pre>\n<p>???</p>\n",
    answers: [
      {
        text: 'c',
        correct: true,
      },
      {
        text: 'a',
        correct: false,
      },
      {
        text: 'b',
        correct: false,
      },
      {
        text: 'd',
        correct: false,
      },
    ],
    comment: '<p>ES 6 introduces a new primitive type - <strong>Symbol</strong>.</p>\n<p>Symbols are unique and immutable. These special characteristics give them a number of usages we will look at shortly.</p>\n<p>But how do you work with symbols?</p>\n<p>The following code creates a symbol:</p>\n<pre><code class="language-javascript">var sym = Symbol();\n</code></pre>\n<p>Be sure not to use the new operator when creating a symbol otherwise you will get an exception.</p>\n<p>During creation you can also set a description for the symbol which is useful mainly for debugging purposes:</p>\n<pre><code class="language-javascript">var sym = Symbol("Enki");\nconsole.log(sym)\n// Symbol(Enki)\n</code></pre>\n<p>Note that supplying a description when creating a symbol does not add the symbol to the symbol registry which we will discuss shortly.</p>\n<p>The typeof method of course returns symbol:</p>\n<pre><code class="language-javascript">typeof Symbol(); //"symbol"\n</code></pre>\n<p>When you create a symbol it is unique even if you create symbols with the same names:</p>\n<pre><code class="language-javascript">var sym1 = Symbol("Enki");\nvar sym2 = Symbol("Enki");\nsym1 === sym2; //false\n</code></pre>\n<p>This probably is not what you would expect but remember Symbols are always unique.</p>\n<p>If you want to be able to access the same symbol using a key, we can use the Symbol registry which we will discuss next.</p>\n',
  },
}