{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/promises/introducing-promises.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>What problem do Promises try to solve?</p>\n<p>???</p>\n',
    answers: [
      {
        text: 'callbacks getting out of control in complex scenarios',
      },
      {
        text: 'asynchronous calls stopping thread execution',
      },
      {
        text: 'lack of any kind of support for asynchronous operation',
      },
      {
        text: 'too many libraries doing the same thing',
      },
    ],
    comment: '<p>A <strong>promise</strong> is an object that represents a value that may or may not be obtained in the future and can be passed around like any other object.</p>\n<p>You may have come across promises in JavaScript before either in the language itself, libraries such as jQuery (which some would argue are not really promises) and libraries such as q or rsvp.</p>\n<p>Some of these libraries conform (and add their own additional functionality as well) to a specification called <strong>Promise/A+</strong>. ES6 bases its promise implementation on this specification.</p>\n<p><strong>Why use promises?</strong></p>\n<p>It is common in JavaScript to perform tasks that do not complete immediately â€“ for example making an ajax call.</p>\n<p>JavaScript only has one thread (ignoring web and service workers) to run in. Pages would run very slowly if we had to stop everything on a page to wait for an ajax call so JavaScript continues to execute other code.</p>\n<p>However we still need a way to know when our ajax call has completed.</p>\n<p>One way of approaching this problem is to use callback functions. A callback function is called when the original task has completed.</p>\n<p>Callbacks work great for simple scenarios but with more complex scenarios things get complex and out of control quickly - for example when you need to handle more complex flow conditions such as multiple callbacks and exceptions.</p>\n<p>A better approach is to use promises lets see how to do this next.</p>\n',
  },
}