{
  __meta__: {
    author: 'rosielowther',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/master-es6-features/tail-call-optimisation-in-es6.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'feature',
  ],
  card: {
    question: '<p>When does the ES6 *<em>tail call optimisation</em></p>\n<p>???</p>\n',
    answers: [
      {
        text: 'work?',
        correct: true,
      },
      {
        text: 'in strict mode',
        correct: false,
      },
      {
        text: 'in non-strict mode',
        correct: false,
      },
    ],
    comment: "<p>A <strong>tail call</strong> is a function call that is in the <strong>tail position</strong> (the last action in a function). Here <code>t()</code> is in the tail position: </p>\n<pre><code>const a = () => h() &#x26;&#x26; t();\n</code></pre>\n<p>In ES6 <strong>tail call optimisation</strong> means that the call can be made without <strong>stack growth</strong>. This only works in <strong>strict mode</strong>.</p>\n<p>You can implement <strong>recursive loops</strong> without growing the stack. For example:</p>\n<pre><code>function factorial(n, acc = 1) {\n    'use strict';\n    if (n &#x3C;= 1) return acc;\n    return factorial(n - 1, n * acc);\n    // recursive call is in tail position.\n}\n</code></pre>\n<p>Note: in this example <code>b()</code> is not in a tail position because functions implicitly return <code>undefined</code>:</p>\n<pre><code>function a() {\n    b();\n    // implicit: return undefined;\n}\n</code></pre>\n",
  },
}