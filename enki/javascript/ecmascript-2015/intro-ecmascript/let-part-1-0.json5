{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/intro-ecmascript/let-part-1.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'tip',
  ],
  card: {
    question: '<p>Fill in the missing gaps with the output of the log statements:</p>\n<pre><code class="language-javascript">let year = 2017\n{\n  let year = 2018\n  console.log(year)\n  // ???\n}\nconsole.log(year)\n// ???\n</code></pre>\n',
    answers: [
      {
        text: '2018',
      },
      {
        text: '2017',
      },
      {
        text: 'error',
      },
      {
        text: 'year',
      },
    ],
    comment: '<p><em>let</em> declares a variable and is used in a similar method to <em>var</em>.</p>\n<p>However, a variable declared using let has the critical difference that the variable <strong>exists only in block scope</strong>.</p>\n<p>This means you can do things like this:</p>\n<pre><code class="language-javascript">function test(){\n   //scope\n   let company="Enki";\n\n   if (1 == 1){\n      //another scope\n      let company = "Apple";\n      console.log(company); //Apple\n   }\n   console.log(company); //Enki\n}\n</code></pre>\n<p>When <em>let</em> is used outside a function it also will not create a global variable, contrary to <code>var</code>s behavior:</p>\n<pre><code class="language-javascript">var global = \'enki\';\nconsole.log(window.global);\n// enki\n\nlet notGlobal="Enki";\nconsole.log(window.notGlobal);\n// undefined\n</code></pre>\n',
  },
}