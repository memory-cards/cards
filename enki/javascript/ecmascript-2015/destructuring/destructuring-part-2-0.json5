{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/destructuring/destructuring-part-2.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'feature',
  ],
  card: {
    question: "<p>What will be the value of <code>a</code> at the end of the code execution?</p>\n<pre><code class=\"language-javascript\">const obj = {\n  a: 'b'\n}\n\nconst {a: b, c = 'a'} = obj\n// a = ???\n</code></pre>\n",
    answers: [
      {
        text: 'undefined',
        correct: true,
      },
      {
        text: "'b'",
        correct: false,
      },
      {
        text: 'c',
        correct: false,
      },
      {
        text: 'b',
        correct: false,
      },
      {
        text: 'obj',
        correct: false,
      },
      {
        text: 'null',
        correct: false,
      },
      {
        text: "'a'",
        correct: false,
      },
    ],
    comment: '<p>Destructuring can also be used to work with objects.</p>\n<h3>Specifying where to assign variables</h3>\n<p>Sometimes when using destructuring you will want to specify where values should be assigned - this can be done as follows:</p>\n<pre><code class="language-javascript">var source =\n{company: "Enki", topic: "js"};\n\nvar {company:v1, topic:v2} = source;\n//v1 = "Enki"\n//v2 = "js"\n</code></pre>\n<h3>Default Properties</h3>\n<p>You can also assign a default value that will be used when destructuring if a source object doesnâ€™t have a matching property.</p>\n<p>Below the default value of <code>200</code> will be used for variable <code>y</code> as the source object does not have a <code>y</code> property.</p>\n<p>Note how <code>x</code>\'s default is overwritten as the <code>x</code> property exists:</p>\n<pre><code class="language-javascript">var {x = 1, y = 200} = {x: 100};\n//x = 100, y = 200\n</code></pre>\n',
  },
}