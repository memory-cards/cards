{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/spread-map-set-math/spread-part-1.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>Complete the following code snippet such that the log statements are correct:</p>\n<pre><code class="language-javascript">function addNumbers(a, b) {\n  return a + b\n}\nconst arr1 = [4, 5]\nconst arr2 = [5, 6]\n\nconsole.log(??? ??? ???)\n// 9\nconsole.log(??? ???)\n</code></pre>\n',
    answers: [
      {
        text: 'addNumbers(',
      },
      {
        text: '...',
      },
      {
        text: 'arr1)',
      },
      {
        text: 'addNumbers',
      },
      {
        text: '(...arr2)',
      },
      {
        text: 'arr2)',
      },
      {
        text: 'addNumbers(...)',
      },
      {
        text: 'addNumbers(arr1)',
      },
      {
        text: 'arr2',
      },
      {
        text: 'arr1',
      },
    ],
    comment: '<p>The spread operator automatically assigns (or spreads out) the contents of an expression to multiple arguments, elements or variables which can save you some tedious assignment code.</p>\n<p>For example letâ€™s say we have an array with 3 values we want to pass to a function accepting three arguments:</p>\n<pre><code class="language-javascript">var test = [1,2,3];\nfunction func(x, y, z){\n...\n}\n</code></pre>\n<p>We could of course call the function with values from the array as follows:</p>\n<pre><code class="language-javascript">func(test[0],test[1],test[2]);\n</code></pre>\n<p>However we can use the spread operator to assign (or spread out) these values to the x, y and z parameters without explicitly defining where they should be assigned:</p>\n<pre><code class="language-javascript">func(...test); //x=1, y=2, z=3\n</code></pre>\n<p>The spread operator can even be applied multiple times so if we had a function with 6 arguments we can use the spread operator twice if we wanted to reuse the input variables:</p>\n<pre><code class="language-javascript">function someFunc(x, y, z, a, b, c){\n...\n}\n\nsomeFunc(...test, ...test);\n</code></pre>\n<p>This saves some tedious and potentially error prone assignment code.</p>\n',
  },
}