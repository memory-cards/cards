{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/generators-proxy/passing-values-to-generators.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>What happens when you pass a value to the <code>next</code> call of a generator?</p>\n<p>???</p>\n',
    answers: [
      {
        text: 'it is assigned to the result of the <code>yield</code> statement',
        correct: true,
      },
      {
        text: 'nothing',
        correct: false,
      },
      {
        text: 'it instantly returns an object of the form <code>{value: input, done: false}</code>',
        correct: false,
      },
      {
        text: 'it will throw an error',
        correct: false,
      },
    ],
    comment: '<p>Generators next method also accepts a parameter.</p>\n<p>When you pass in a parameter it is assigned to the result of the <strong>yield</strong> statement (if you donâ€™t pass anything in this is undefined).</p>\n<p>We could for example use this functionality to reset our number sequence when 0 is passed in:</p>\n<pre><code class="language-javascript">function* getGenerator(){\n var currentNumber = 1;\n\n while(currentNumber &#x3C; 6){\n  var input = yield currentNumber++;\n  if (input==0) currentNumber = 1;\n }\n}\n\nvar g = getGenerator();\n\ng.next().value //1\ng.next().value //2\ng.next().value //3\ng.next(0).value //1\n</code></pre>\n<p>There is however also a gotcha to watch out for when passing values to generators.</p>\n<p>This is best implemented with an example - the below function simply logs to the console any values passed in:</p>\n<pre><code class="language-javascript">function* getGenerator(){\n while(true){\n  console.log(yield);\n }\n}\n</code></pre>\n<p>However, the first value we pass in will be ignored!</p>\n<pre><code class="language-javascript">var g = getGenerator();\ng.next("a") //ignored\ng.next("b") // b\n</code></pre>\n<p>This is because the first time we get our generator we are at the beginning of the function and there is nothing to log from the yield statement.</p>\n<p>The solution is to simply call the generators next method once:</p>\n<pre><code class="language-javascript">var g = getGenerator();\ng.next();\ng.next("a") //a\ng.next("b") // b\n</code></pre>\n',
  },
}