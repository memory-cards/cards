{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/generators-proxy/generators-and-exceptions.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: "<p>What will be the output of the following generator calls?</p>\n<pre><code class=\"language-javascript\">function\n  while(true) {\n    try {\n      yield 'enki'\n    } catch(err) {\n      console.log('Error')\n    }\n  }\n}\n\nconst g = myGen()\ng.next()\n// { value: 'enki', done: false }\ng.throw('abc')\n// ???\n// ???\n</code></pre>\n",
    answers: [
      {
        text: 'myGen() {',
      },
      {
        text: 'Error',
      },
      {
        text: "{ value: 'enki', done: false}",
      },
      {
        text: 'nothing',
      },
      {
        text: "Error('abc')",
      },
      {
        text: 'abc',
      },
    ],
    comment: '<p>All code inside a generator despite appearances works synchronously.</p>\n<p>This means that error handling occurs as you would expect.</p>\n<p>The example below will catch and log out any exceptions:</p>\n<pre><code class="language-javascript">function* getGenerator() {\n  while(true) {\n    try {\n      console.log("normal")\n      yield;\n    } catch(err) {\n    console.log(\n      "something bad: " + err\n      );\n    }\n  }\n}\n\ng = getGenerator();\n</code></pre>\n<p>We can use generators <strong>throw</strong> method to create an exception.</p>\n<p>The exception occurs at the point where the generator is paused from the previous yield statement.</p>\n<pre><code class="language-javascript">g.throw("bad error");\n</code></pre>\n',
  },
}