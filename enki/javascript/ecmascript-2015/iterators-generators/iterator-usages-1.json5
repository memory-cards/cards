{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/ecmascript-2015/iterators-generators/iterator-usages.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>Can an iterator be used to implement an infinite sequence?</p>\n<p>???</p>\n',
    answers: [
      {
        text: 'Yes, by never returning done` as `true',
      },
      {
        text: 'No, because an iterator must always have done` equal to `true at some point',
      },
      {
        text: 'No, because the memory needed will kill any machine',
      },
      {
        text: 'Yes, by making the next function recursive',
      },
    ],
    comment: "<p>Of course, iterators can work with any sequence of items you want so you could use iterator for:</p>\n<ul>\n<li>More efficient resource and memory usage as values are computed on demand and not held in memory</li>\n<li>Mathematical sequences of numbers e.g. the classic example is Fibonacci numbers</li>\n<li>Records from the database</li>\n<li>Infinite sequences (remember to never return done as true!)</li>\n<li>Generate sequences of id's</li>\n<li>As a state machine, e.g. you might have different discount levels for a customer and could move from new customer to regular to VIP</li>\n</ul>\n<p>It's a fair amount of code to create even a simple iterator. ES6 offers another way that is usually a better option for most scenarios called <strong>Generators</strong> which we will look at next.</p>\n",
  },
}