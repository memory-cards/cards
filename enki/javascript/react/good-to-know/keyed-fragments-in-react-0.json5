{
  __meta__: {
    author: 'catalin',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/react/good-to-know/keyed-fragments-in-react.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'feature',
  ],
  card: {
    question: '<p>Complete the <code>createFragment</code> add-on below which can give keys to sets of children:</p>\n<pre><code class="language-javascript">Array&#x3C;ReactNode ???(\n      object ???);\n</code></pre>\n',
    answers: [
      {
        text: '<code>createFragment</code>',
      },
      {
        text: '<code>children</code>',
      },
      {
        text: '<code>create</code>',
      },
      {
        text: '<code>opaque</code>',
      },
      {
        text: '<code>props</code>',
      },
      {
        text: '<code>createProps</code>',
      },
    ],
    comment: '<p>With two sets of children that need reordering, there is no way of putting a key on each set without adding a wrapper element.</p>\n<p>To solve this problem, <strong>React</strong> provides the <code>createFragment</code> add-on which can give keys to sets of children.</p>\n<pre><code class="language-javascript">Array&#x3C;ReactNode> createFragment(\n    object children);\n</code></pre>\n<p>Instead of:</p>\n<pre><code class="language-javascript">children = [this.props.rightChildren,\n    this.props.leftChildren];\n</code></pre>\n<p>This can be done like:</p>\n<pre><code class="language-javascript">var createFragment= require(\n    \'react-addons-create-fragment\');\n\nchildren = createFragment({\n  right: this.props.rightChildren,\n  left:this.props.leftChildren,\n});\n</code></pre>\n<p>The <code>left</code>and <code>right</code> keys are used as keys for the entire set of children, and the rendering order is determined by the order of object\'s keys.</p>\n<p>The return value of <code>createFragment</code>  is an opaque object and <code>React.Children</code> helpers should be used in order to access it.</p>\n<p>In the future, <code>createFragment</code> may be replaced by a different <strong>API</strong> which should allow you assigning keys without a wrapper.</p>\n',
  },
}