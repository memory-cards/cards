{
  __meta__: {
    author: 'catalin',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/react/gotchas/react-in-line-styles.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>Consider the following style object:</p>\n<pre><code class="language-javascript">var pStyle = {\n  fontSize: 15,\n  color: \'black\'\n}\n</code></pre>\n<p>How would you pass it to the following <code>&#x3C;p /></code>?</p>\n<pre><code class="language-javascript">ReactDDOM.render(\n  &#x3C;p ??? ??? ???>Enki!&#x3C;/p>,\naNode)\n</code></pre>\n',
    answers: [
      {
        text: 'style',
      },
      {
        text: '=',
      },
      {
        text: '{pStyle}',
      },
      {
        text: 'pstyle',
      },
      {
        text: ':',
      },
      {
        text: 'pStyle',
      },
      {
        text: 's',
      },
      {
        text: 'applyStyle',
      },
      {
        text: 'useStyle',
      },
      {
        text: '{style}',
      },
    ],
    comment: "<p>In <strong>React</strong> in-line styling is not done by specifying a string, but by creating an object with the needed value for the style.</p>\n<p>The object name represents the name of the style and should be written in <em>camelCase</em> format.</p>\n<p>Create the style object:</p>\n<pre><code class=\"language-javascript\">var divStyle = {\n  color : 'white',\n  WebkitTransition: 'all',\n  msTransition: 'all'\n};\n</code></pre>\n<p>All style keys are <em>camelCased</em> to provide consistency, yet vendor prefixes should begin with capital letters ( <code>ms</code> is the only exception).</p>\n<p>Apply the style:</p>\n<pre><code class=\"language-javascript\">ReactDOM.render(&#x3C;div style={divStyle}>\n  Hello World!&#x3C;/div>, myNode);\n</code></pre>\n<p>The style object can also be created from <code>state</code> or <code>props</code> of a component!</p>\n",
  },
}