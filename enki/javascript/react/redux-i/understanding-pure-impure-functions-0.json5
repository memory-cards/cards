{
  __meta__: {
    author: 'catalin',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/react/redux-i/understanding-pure-impure-functions.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: "<p>Are the following functions pure or impure?</p>\n<pre><code class=\"language-javascript\">function a(x) {\n  x = 'enki'\n  return x\n}\n\nfunction b(x){\n  return 'enki'\n}\n</code></pre>\n<p>???</p>\n",
    answers: [
      {
        text: 'impure, pure',
        correct: true,
      },
      {
        text: 'pure, impure',
        correct: false,
      },
      {
        text: 'impure, impure',
        correct: false,
      },
      {
        text: 'pure, pure',
        correct: false,
      },
    ],
    comment: '<p>As <strong>Redux</strong> is based on the general concept of the <em>single immutable state tree</em>, <strong>pure</strong> functions should be used as often as possible as not to alter any state, but to always generate new states (especially for the frontend).</p>\n<p><strong>Pure</strong> functions are basically functions whose <code>return</code> value depends only on their arguments. They don\'t have observable side effects (database/network calls) and are predictable.</p>\n<p>Example of a simple pure function:</p>\n<pre><code class="language-javascript">function doublePure(x) {\n  return 2*x;\n }\n</code></pre>\n<p><strong>Pure</strong> functions must always return a new object and not modify the argument. For example, if we want to decrement every element of an <code>array</code>, the <strong>pure</strong> way to do it\'s by creating a new array with the same elements, but decremented.</p>\n<p>On the contrary, <strong>impure</strong> functions don\'t have a predictable behaviour as they might call the network, the database, modify the <strong>DOM</strong> or even alter the value/s passed to them.</p>\n<p>Example:</p>\n<pre><code class="language-javascript">function doubleImpure(x) {\n  x= 2 * x;\n  return x;\n}\n</code></pre>\n',
  },
}