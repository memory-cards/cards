{
  __meta__: {
    author: 'catalin',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/react/basics-ii/conditional-rendering-part-1.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'how to',
  ],
  card: {
    question: '<p>What does *<em>React</em></p>\n<p>???</p>\n',
    answers: [
      {
        text: 'use for **conditional rendering**?',
        correct: true,
      },
      {
        text: 'standard <code>JS</code> - <code>if</code>s and ternary operators',
        correct: false,
      },
      {
        text: 'the <code>renderIf</code> special method',
        correct: false,
      },
      {
        text: 'the <code>renderIfElse</code> special method',
        correct: false,
      },
      {
        text: "you can't conditional render in **React**",
        correct: false,
      },
    ],
    comment: '<p><strong>Conditional rendering</strong> is the long-standing technique of <code>render</code>ing different <code>element</code>s for different scenarios.</p>\n<p>Exploiting the power of pure <code>JS</code>, <strong>React</strong> allows conditional rendering with simple <code>if</code>s or <em>ternary operators</em>[1].</p>\n<p>Consider the following two functional components:</p>\n<pre><code class="language-jsx">function Sunny(props) {\n  return &#x3C;p>Enjoy the weather&#x3C;/p>;\n}\n\nfunction Rainy(props) {\n  return &#x3C;p>You should take an umbrella&#x3C;/p>\n}\n</code></pre>\n<p>You might want to render either <code>&#x3C;Sunny /></code> or <code>&#x3C;Rainy /></code> in different scenarios.\nFurthermore, you might use a <code>props.isRaining</code> deciding which component should be rendered:</p>\n<pre><code class="language-jsx">function Message(props) {\n  const isRaining = props.isRaining;\n  if (isRaining) {\n    return &#x3C;Rainy />;\n  }\n  return &#x3C;Sunny />;\n}\n</code></pre>\n<p>In addition, such <code>element</code>s can be stored using <strong>variables</strong>. This is particularly useful when conditional <code>render</code>ing just parts of the <code>component</code>:</p>\n<pre><code class="language-jsx">class Message extends React.component {\n  render() {\n    const isRaining = props.isRaining;\n    let message = null;\n\n    message = isRaining ?\n      &#x3C;Rainy /> : &#x3C;Sunny/>;\n\n    return (\n      &#x3C;div>\n        {message}\n        &#x3C;p> Anyways, enjoy your day &#x3C;/p>;\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<p>When rendering <code>Message</code> component with <code>isRaining=true</code>, it will make use of <code>&#x3C;Rainy /></code> while otherwise it will use <code>&#x3C;Sunny /></code>. In both cases the latter <code>&#x3C;p></code> is shown as well.</p>\n',
  },
}