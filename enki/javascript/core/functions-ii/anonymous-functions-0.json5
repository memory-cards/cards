{
  __meta__: {
    author: 'rosielowther',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/functions-ii/anonymous-functions.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
    'introduction',
    'workout',
  ],
  card: {
    question: '<p>Is the <code>name</code> field used in a *<em>function expression</em></p>\n<p>???</p>\n',
    answers: [
      {
        text: 'for defining functions mandatory?',
        correct: true,
      },
      {
        text: 'no',
        correct: false,
      },
      {
        text: 'yes',
        correct: false,
      },
      {
        text: 'only on browsers',
        correct: false,
      },
      {
        text: 'only in older JavaScript versions',
        correct: false,
      },
    ],
    comment: '<p>If you use a <strong>function expression</strong> to define a function, you can omit the function\'s name. The syntax is:</p>\n<pre><code class="language-javascript">function [name]([p1[, p2[, ...,]]]) {\n   statements\n}\n</code></pre>\n<p>An example of an <strong>anonymous</strong> function:</p>\n<pre><code class="language-javascript">var square = function(x) {\n   return x * x;\n};\n</code></pre>\n<p>The downsides to anonymous function expressions are:</p>\n<ul>\n<li>You are unable to refer to the function within itself e.g. for recursion.</li>\n<li>You can\'t debug easily, especially in minified code.</li>\n<li>You can lose the clarity gained by naming functions sensibly.</li>\n</ul>\n<p>Note: you must name a function defined by a <strong>function declaration</strong>.</p>\n',
  },
}