{
  __meta__: {
    author: 'pawel',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/strings-ii/most-efficient-way-to-build-html-strings.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'best practice',
    'strings',
    'html',
    'introduction',
    'workout',
  ],
  card: {
    question: '<p>Fill in the gaps of the following snippet such that the <code>squares</code> string will contain, one after the other, the square value of all numbers from <code>1</code> to <code>10</code>:</p>\n<pre><code class="language-javascript">var squares = \'\';\nfor (var i = 1; i ??? 10; i ++) {\n  squares ??? i*i ??? \' \'\n}\nconsole.log(squares)\n// "1 4 9 16 25 36 49 64 81 100 "\n</code></pre>\n',
    answers: [
      {
        text: '<=',
      },
      {
        text: '+=',
      },
      {
        text: '+',
      },
      {
        text: '=+',
      },
      {
        text: '<',
      },
      {
        text: '>',
      },
      {
        text: '++',
      },
      {
        text: 'join',
      },
      {
        text: 'concat',
      },
      {
        text: '/',
      },
      {
        text: '%',
      },
    ],
    comment: "<p>On modern browsers, building <strong>HTML</strong> strings with <code>.join()</code> is less efficient than concatenating strings with the <code>+</code> operator. This is due to the fact that the plus operator is optimized internally by modern JavaScript egines.</p>\n<p>So, adding the values to an array and then joining them at the end:</p>\n<pre><code class=\"language-javascript\">var html = [];\nfor(var i=0; i&#x3C;100; i++) {\n  html.push('&#x3C;p>', i, '&#x3C;/p>');\n}\nhtml = html.join('');\n</code></pre>\n<p>Runs slower than the straightforward method of building <code>HTML</code> strings using <code>+=</code>:</p>\n<pre><code class=\"language-javascript\">var html = '';\nfor(var i=0; i&#x3C;100; i++) {\n  html += '&#x3C;p>' + i + '&#x3C;/p>'\n}\n</code></pre>\n",
  },
}