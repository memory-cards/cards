{
  __meta__: {
    author: 'rosielowther',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/async-tips/inversion-of-control.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
    'workout',
    'deep',
    'obscura',
  ],
  card: {
    question: '<p>What can *<em>Promises</em></p>\n<p>???</p>\n',
    answers: [
      {
        text: 'do compared to callbacks?',
      },
      {
        text: 'un-invert the control',
      },
      {
        text: 'enforce control',
      },
      {
        text: 'call your callback earlier',
      },
      {
        text: 'call your callback more frequently',
      },
    ],
    comment: '<p><strong>Inversion of control</strong> is one of the problems of using <strong>callbacks</strong> for asynchronous programming in JavaScript.</p>\n<p>Callbacks force you to <strong>trust another party</strong> ("Don\'t call me, I\'ll call you!"). In some cases this will mean relying on a function that was written by a third-party.</p>\n<p>Control of the code executing now is separate to the part of the program that executes later, controlled by the other party:</p>\n<pre><code class="language-javascript">// now (your control)\nasyncFunc(function(){\n    // later (inverted control)\n});\n</code></pre>\n<p>This requires trust that the third party doesn\'t:</p>\n<ul>\n<li>call your callback too early/late</li>\n<li>call your callback too many/few times</li>\n<li>omit any callback states/parameters</li>\n<li>forget to alert a callback failure</li>\n</ul>\n<p>New async options such as <strong>Promises</strong> un-invert the control.</p>\n',
  },
}