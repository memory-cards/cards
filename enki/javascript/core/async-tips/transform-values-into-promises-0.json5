{
  __meta__: {
    author: 'Dral',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/async-tips/transform-values-into-promises.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'how to',
    'promises',
    'functional programming',
    'async',
    'introduction',
    'workout',
    'deep',
  ],
  card: {
    question: '<p>Create the following promise to represent an error:</p>\n<pre><code class="language-javascript">return Promise.???(\n  new ???(\'Boo! :o\')\n)\n</code></pre>\n',
    answers: [
      {
        text: '<code>reject</code>',
      },
      {
        text: '<code>Error</code>',
      },
      {
        text: '<code>error</code>',
      },
      {
        text: '<code>create</code>',
      },
      {
        text: '<code>exception</code>',
      },
    ],
    comment: "<p>To keep your API consistent, or prototype for testing, it's often useful to return a <code>Promise</code> that resolves to a value directly.</p>\n<pre><code class=\"language-javascript\">return new Promise(resolve => {\n  resolve('my value')\n})\n</code></pre>\n<p><code>Promises</code> in <code>ES6</code> have a shortcut for this common pattern:</p>\n<pre><code class=\"language-javascript\">return Promise.resolve('my value')\n</code></pre>\n<p>Or to create a <code>Promise</code> representing an error:</p>\n<pre><code class=\"language-javascript\">return Promise.reject(\n  new Error('Boo! :o')\n)\n</code></pre>\n",
  },
}