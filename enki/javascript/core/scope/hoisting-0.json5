{
  __meta__: {
    author: 'AlexYancey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/scope/hoisting.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'feature',
    'introduction',
    'workout',
  ],
  card: {
    question: '<p>What will the following functions print? ???</p>\n<pre><code>var e = 1;\nfunction run(){\n    console.log(e);\n    var e = 4;\n}\nrun();\n\nvar c = 1;\nfunction calc() {\n    console.log(c*c);\n    c = 4;\n}\ncalc();\n</code></pre>\n',
    answers: [
      {
        text: 'run: undefined, calc: 1',
        correct: true,
      },
      {
        text: 'run: 1, calc: 1',
        correct: false,
      },
      {
        text: 'run: 4, calc: 1',
        correct: false,
      },
      {
        text: 'run: 4, calc: 4',
        correct: false,
      },
      {
        text: 'run: undefined, calc: undefined',
        correct: false,
      },
    ],
    comment: '<p>Think fast, what does this snippet print?</p>\n<pre><code class="language-javascript">    var a = 1;\n    function go(){\n        console.log(a);\n        var a = 2;\n    }\n    go();\n</code></pre>\n<p>If you thought the answer was <code>1</code>, you are incorrect!</p>\n<p><code>> undefined</code></p>\n<p>One quirk of JavaScript is <em>hoisting</em>.</p>\n<p>This default behaviour moves all variable declarations to the top of the current scope.</p>\n<p>This is how the snippet is actually executed, in order:</p>\n<pre><code>var a;\na = 1;\nfunction go(){\n    var a;\n    console.log(a);\n    a = 2;\n}\ngo();\n</code></pre>\n<p>In this case, <code>a</code> is redeclared and reset to <code>undefined</code> before it is logged.</p>\n',
  },
}