{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/numbers/parsing-numbers-and-ieee-754.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
  ],
  card: {
    question: '<p>What will be the output of the following function call?</p>\n<pre><code class="language-javascript">console.log(parseInt("abc",10));\n# ???\n</code></pre>\n',
    answers: [
      {
        text: 'NaN',
      },
      {
        text: 'Error',
      },
      {
        text: '10',
      },
    ],
    comment: '<p>If you want to convert string input to a number type you can use the <em>parseInt</em> and <em>parseFloat</em> methods.</p>\n<p><em>parseInt</em> accepts 2 arguments:</p>\n<ul>\n<li>Value to be converted</li>\n<li>Radix or base of the number system to use </li>\n</ul>\n<p>The Radix or base defaults to 10 on later browsers but it is probably still best to specify as this is not the case on older browsers.</p>\n<p><em>parseFloat</em> accepts just one argument:</p>\n<ul>\n<li>Value to be converted</li>\n</ul>\n<p>The below example shows how to use <em>parseInt</em> and <em>parseFloat</em>:</p>\n<pre><code>parseInt("10", 10);//base 10, 10\nparseInt("011", 2);//binary, 3\nparseFloat("0.1");// 0.1\n</code></pre>\n<p>If we try to parse a value that cannot be converted, then JavaScript will return a special value called NaN (not a number):</p>\n<pre><code>parseInt("abc",10);//NaN\n</code></pre>\n<p><strong>IEEE-754</strong></p>\n<p>All numbers in JavaScript are held as <em>64 bit floating point numbers</em> using a format called <em>IEEE-754</em>.</p>\n<p>You should be aware this means you can get issues when performing certain calculations (this also occurs in other languages that use IEEE-754) as certain numbers cannot be represented exactly. For example:</p>\n<pre><code>0.1 + 0.2 = 0.30000000000000004\n</code></pre>\n',
  },
}