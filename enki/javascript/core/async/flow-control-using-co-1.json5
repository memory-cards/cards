{
  __meta__: {
    author: 'rosielowther',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/async/flow-control-using-co.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'feature',
    'workout',
    'deep',
    'async',
    'promises',
    'npm',
    'yield',
  ],
  card: {
    question: '<p>Can *<em>generator function</em></p>\n<p>???</p>\n',
    answers: [
      {
        text: 'be <code>yield</code>ed by <code>co()</code>?',
        correct: true,
      },
      {
        text: 'yes',
        correct: false,
      },
      {
        text: 'no',
        correct: false,
      },
    ],
    comment: "<p><em>co</em> is a <strong>flow control program</strong>, which uses <strong>generators</strong> and <strong>promises</strong>. Use it to write non-blocking code more cleanly. It can be used in the browser and with Node.javascript.</p>\n<p>An example of <em>co</em>:</p>\n<pre><code>co(function *(){\n  // yield any promise \n  var result = yield Promise.resolve(true);\n}).catch(onerror);\n \nco(function *(){\n  // resolve multiple promises in parallel \n  var a = Promise.resolve(1);\n  var b = Promise.resolve(2);\n  var all = yield [a, b];\n  console.log(all);\n  // => [1, 2] \n}).catch(onerror);\n</code></pre>\n<p><code>co()</code> can <code>yield</code> promises, 'thunks', arrays, objects, generators and generator functions.</p>\n<p><code>co()</code> can be used for parallel execution and delegation.</p>\n<p><em>co</em> version 4 returns a promise, similar to ES7 async/await, but with better parallelism capabilites than its previous versions (i.e. you can yield an array of promises and <em>co</em> will handle the parallelism).</p>\n",
  },
}