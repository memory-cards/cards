{
  __meta__: {
    author: 'alexjmackey',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/core/flow-control/loops-part-2.md',
  },
  type: 'choose_options',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
    'introduction',
  ],
  card: {
    question: '<p>To exit a loop, you can use the ??? keyword.</p>\n',
    answers: [
      {
        text: 'break',
        correct: true,
      },
      {
        text: 'stop',
        correct: false,
      },
      {
        text: 'finish',
        correct: false,
      },
      {
        text: 'end',
        correct: false,
      },
    ],
    comment: '<p><em>for in</em> loops allow you to iterate through an objects keys. E.g. the keys below are firstName and lastName:</p>\n<pre><code class="language-javascript">var obj = {\n   firstName: "John",\n   lastName: "Smith"\n};\n</code></pre>\n<p>The keys can be used to get the value:</p>\n<pre><code class="language-javascript">for (var i in obj) {\n   console.log(i); //key  \n   console.log(obj[i]); //value\n} //firstName John lastName Smith\n</code></pre>\n<p><strong>For of</strong></p>\n<p><em>for of</em> loops are used with iterable objects such as arrays &#x26; maps and allow you to easily loop through an iterables values:</p>\n<pre><code class="language-javascript">var iterable = [10, 20, 30];\nfor (var i of iterable) {\n   console.log(i); //10 20 30\n}\n</code></pre>\n<p><strong>Why use for of?</strong></p>\n<p><em>for of</em> loops will only iterate over an objects values and <strong>not</strong> inherited properties like the <em>for in</em> loop will.</p>\n<p>For example note how the for in loop below returns newFunc that was added to array\'s prototype (we\'ll look at prototype shortly but for now think of it as a way to add functionality):</p>\n<pre><code class="language-javascript">Array.prototype.newFunc = function() {};\nvar iterable = [10, 20, 30];\n\nfor (var i in iterable) {\n   console.log(i); //0 1 2 newFunc\n}\n\nfor (var i of iterable) {\n   console.log(i); //10 20 30\n}\n</code></pre>\n<p><strong>break and continue</strong></p>\n<p>The break statement exits out of a loop and continue will go to the next iteration:</p>\n<pre><code class="language-javascript">var i = 0;\ndo {\n  i++;\n  if(i===2){\n    //skip over 2nd iteration\n    continue;\n  }\n  if(i===5){\n    //exit loop\n    break;\n  }\n\n  console.log(i);    \n} while (i&#x3C;10);\n//1 3 4\n</code></pre>\n',
  },
}