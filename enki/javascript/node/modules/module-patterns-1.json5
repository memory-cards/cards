{
  __meta__: {
    author: 'tommarshall',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/node/modules/module-patterns.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
    'introduction',
    'workout',
  ],
  card: {
    question: "<p>Complete the code snippet to export the named function:</p>\n<pre><code class=\"language-javascript\">// module.js\nexports.foo = function() {\n\n  console.log('Named!');\n\n}\n\n// main.js\nvar foo = require('./module.js'???;\nfoo();\n</code></pre>\n",
    answers: [
      {
        text: ').foo',
      },
      {
        text: ')',
      },
      {
        text: ').module',
      },
      {
        text: ').exports',
      },
    ],
    comment: "<p>Module patterns are common practices when developing Node applications in a modular way. Module patterns allow code to be written in a pro-modular way, protecting the context of some modules whilst exposing the necessary modules and variables by attaching them to the global object.</p>\n<p>There are a number of different Node module patterns, the simplest being the example shown in the previous insight, requiring a module with just a simple <code>console.log()</code> statement included.</p>\n<p>Other module patterns are:</p>\n<p>Exporting an anonymous function:</p>\n<pre><code class=\"language-javascript\">// module.js\nmodule.exports = function() {\n\n  console.log('Anonymous!');\n\n}\n\n// main.js\nvar func = require('./module.js');\nfunc();\n</code></pre>\n<p>Named functions can be exported in a similar way, however notice differences when defining the function and requiring the module:</p>\n<pre><code class=\"language-javascript\">// module.js\nexports.foo = function() {\n\n  console.log('Named!');\n\n}\n\n// main.js\nvar foo = require('./module.js').foo;\nfoo();\n</code></pre>\n",
  },
}