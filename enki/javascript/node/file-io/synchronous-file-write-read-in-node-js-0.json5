{
  __meta__: {
    author: 'rosielowther',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/node/file-io/synchronous-file-write-read-in-node-js.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'must-know',
    'introduction',
    'workout',
  ],
  card: {
    question: '<p>Import the necessary module and fill in the gaps to read <code>file.txt</code> synchronously:</p>\n<pre><code class="language-javascript">const fs = ???\n\n???.???(\'file.txt\')\n</code></pre>\n',
    answers: [
      {
        text: "require('fs')",
      },
      {
        text: 'fs',
      },
      {
        text: 'readFileSync',
      },
      {
        text: 'fileReader',
      },
      {
        text: 'file',
      },
      {
        text: 'FileReader',
      },
      {
        text: 'readFile',
      },
      {
        text: 'readFileAsync',
      },
      {
        text: 'readFileTxt',
      },
    ],
    comment: '<p>The File System (FS) module provides file I/O. The methods have asynchronous and synchronous forms.</p>\n<p>When using the synchronous form any exceptions are immediately thrown. It is only recommended to use this form during program startup.</p>\n<p>Use <code>fs.writeFileSync</code>  to <strong>write data to a file</strong>:</p>\n<pre><code class="language-javascript">const fs = require(\'fs\')\n\nfs.writeFileSync(file, data[, options])\n</code></pre>\n<p>This is the same syntax as <code>fs.writeFile</code> but it is synchronous and returns undefined rather than a callback function.</p>\n<pre><code class="language-javascript">fs.readFileSync(file[, options])\n</code></pre>\n<p>Use <code>fs.readFileSync</code> to <strong>return the contents of a file</strong>:</p>\n<pre><code class="language-javascript">// suppose file.txt\nconst fileContent =\n  fs.readFileSync(\'./file.txt\')\n</code></pre>\n<p>This is the synchronous version of <code>fs.readFile</code>. It returns a string or a buffer.</p>\n',
  },
}