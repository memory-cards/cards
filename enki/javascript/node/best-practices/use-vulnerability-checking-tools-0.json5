{
  __meta__: {
    author: 'mihaiberq',
    source: 'https://github.com/enkidevs/curriculum/blob/master/javascript/node/best-practices/use-vulnerability-checking-tools.md',
  },
  type: 'choose_sequence',
  lang: 'en',
  tags: [
    'enki',
    'how to',
    'introduction',
    'new',
    'deep',
  ],
  card: {
    question: '<p>If you are using <code>npm</code>, where can you usually find the frozen versions of your packages?</p>\n<p>???</p>\n',
    answers: [
      {
        text: 'npm-shrinkwrap.json',
      },
      {
        text: 'yarn-shrinkwrap.json',
      },
      {
        text: 'package.json',
      },
      {
        text: 'frozen-package.json',
      },
    ],
    comment: "<p>Medium and large applications usually have an impressive number of dependencies. The latest <code>npm i</code> for the Enki repository installed over 2,800 packages - direct dependencies and their dependencies as well.</p>\n<p>In order for the code not to break in production, dependencies also have to be frozen to a specific version that works for sure (<code>shrinkwrap</code>) and updated manually. But as you can imagine, the chain of dependencies might be the cause for a lot of trouble: old, insecure versions of packages might find their way into your <code>package.json</code>. You don't even have to use it yourself, it can be needed by another package.</p>\n<p>Because it is hard to check everything manually, wouldn't it be nice to have an automated tool that does just that? It's called <code>nsp</code>, Node Security Platform, and it checks your <code>package.json</code> and <code>npm-shrinkwrap.json</code> for vulnerabilities.</p>\n<p>Install and run it with:</p>\n<pre><code>$ npm install nsp --global\n$ cd path/to/project &#x26;&#x26; nsp check\n</code></pre>\n<p>There is also the task runner version for both <code>gulp</code> and <code>grunt</code> so you can add it to your CI service:</p>\n<pre><code>$ npm install gulp-nsp --save-dev\n$ npm install grunt-nsp --save-dev\n</code></pre>\n<p>To check your code against insecure coding patterns, try the <code>nsp</code> ESlint plugin:</p>\n<pre><code>$ npm install --save-dev\n    eslint-plugin-security\n</code></pre>\n<p>Then add it as a plugin in your <code>.eslintrc</code> file.</p>\n",
  },
}